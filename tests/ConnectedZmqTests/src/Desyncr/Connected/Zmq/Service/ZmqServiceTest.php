<?php
/**
 * Desyncr\Connected\ZmqTest\Service
 *
 * PHP version 5.4
 *
 * @category General
 * @package  Desyncr\Connected\ZmqTest\Service
 * @author   Dario Cavuotti <dc@syncr.com.ar>
 * @license  https://www.gnu.org/licenses/gpl.html GPL-3.0+
 * @version  GIT:<>
 * @link     https://github.com/desyncr
 */
namespace Desyncr\Connected\ZmqTest\Service;

use Desyncr\Connected\Zmq\Options\ZmqServiceOptions;
use Desyncr\Connected\Zmq\Service\ZmqService;

class ZmqClient
{
    public function getSocket()
    {
    }
}

class Socket
{
    public function connect()
    {
    }
    public function send()
    {
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class ZmqServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ZmqService
     */
    protected $object;
    protected $mock;
    protected $defaults = array(
        'host' => 'tcp://127.0.0.1',
        'port' => 5555,
        'socket_name' => 'websocket-pusher',
        'socket_type' => \ZMQ::SOCKET_PUSH,
    );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->sockMock = $this->getMock('Socket', array('send', 'connect'));
        $this->sockMock->expects($this->any())
            ->method('send');

        $this->sockMock->expects($this->any())
            ->method('connect')
            ->will($this->returnValue(true));

        $this->mock = $this->getMock('ZmqClient', array('getSocket'));

        $this->mock->expects($this->any())
            ->method('getSocket')
            ->will($this->returnValue($this->sockMock));

        $options = new ZmqServiceOptions($this->defaults);
        $this->object = new ZmqService($this->mock, $options);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Desyncr\Connected\Zmq\Service\ZmqService::__construct
     */
    public function testConfiguration()
    {
        $config = array(
            'host' => 'tpc://127.0.0.1',
            'port' => 5555,
        );
        $options = new ZmqServiceOptions($config);

        $this->object = new ZmqService($this->mock, $options);
        $address = $config['host'] . ':' . $config['port'];
        $this->assertEquals($address, $this->object->getAddress());

        $this->assertEquals($config['host'], $this->object->getOptions()->getHost());

    }

    /**
     * @covers Desyncr\Connected\Zmq\Service\ZmqService::dispatch
     */
    public function testDispatch()
    {
        $key = 'test.job';
        $job = array('id' => $key);
        $this->object->add($key, $job);

        $this->sockMock->expects($this->once())
            ->method('send');

        $this->object->dispatch();

    }

    /**
     * @covers Desyncr\Connected\Zmq\Service\ZmqService::dispatch
     */
    public function testDispatchMultipleJobs()
    {
        $key = 'test.job';
        $job = array(1, 2, 3, 4, 5);

        for ($i = 0 ; $i <= 4 ; $i++) {
            $this->object->add($key . $i, $job[$i]);
        }

        $this->sockMock->
            expects($this->exactly(5))->
            method('send');

        $this->object->dispatch();
    }
}
